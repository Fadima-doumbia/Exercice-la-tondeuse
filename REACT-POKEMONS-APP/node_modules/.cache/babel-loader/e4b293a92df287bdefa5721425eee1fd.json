{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fadima\\\\Desktop\\\\REACT\\\\REACT-POKEMONS-APP\\\\src\\\\components\\\\pokemon-form.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport formatType from '../helpers/format-type';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PokemonForm = _ref => {\n  _s();\n\n  let {\n    pokemon\n  } = _ref;\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n\n    if (checked) {\n      // si l'utilisateur coche un type, à l'ajoute a la liste des types de pokemon.\n      const newTypes = form.types.value.concat([type]);\n      newField = {\n        value: newTypes\n      };\n    } else {\n      //  si l'utilisateur decoche un type, on le retire de la liste des types de pokemon\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      newField = {\n        value: newTypes\n      };\n    }\n\n    setForm({ ...form,\n      ...{\n        types: newField\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col s12 m8 offset-m2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card hoverable\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-image\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pokemon.picture,\n              alt: pokemon.name,\n              style: {\n                width: '250px',\n                margin: '0 auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-stacked\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"name\",\n                  children: \"Nom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"name\",\n                  name: \"name\",\n                  type: \"text\",\n                  className: \"form-control\",\n                  value: form.name.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"hp\",\n                  children: \"Point de vie\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"hp\",\n                  name: \"hp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.hp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"cp\",\n                  children: \"D\\xE9g\\xE2ts\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"cp\",\n                  name: \"cp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.cp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Types\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 19\n                }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    marginBottom: '10px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      id: type,\n                      type: \"checkbox\",\n                      className: \"filled-in\",\n                      value: type,\n                      checked: hasType(type),\n                      onChange: e => selectType(type, e)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 98,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: formatType(type),\n                        children: type\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 100,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 23\n                  }, this)\n                }, type, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-action center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn\",\n                children: \"Valider\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PokemonForm, \"YO+W6MAG0ewl7BzUXuRPtof5muY=\");\n\n_c = PokemonForm;\nexport default PokemonForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonForm\");","map":{"version":3,"sources":["C:/Users/Fadima/Desktop/REACT/REACT-POKEMONS-APP/src/components/pokemon-form.tsx"],"names":["React","useState","formatType","PokemonForm","pokemon","form","setForm","name","value","isValid","hp","cp","types","hasType","type","includes","handleInputChange","e","fieldName","target","fieldValue","newField","selectType","checked","newTypes","concat","filter","currentType","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon\r\n};\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n}\r\n\r\ntype Form = {\r\n  name: Field,\r\n  hp: Field,\r\n  cp: Field,\r\n  types: Field\r\n}\r\n  \r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\r\n  \r\n  const [form, setForm] = useState<Form>({\r\n    name: {value: pokemon.name, isValid: true},\r\n    hp: { value: pokemon.hp, isValid: true},\r\n    cp: { value: pokemon.cp, isValid: true},\r\n    types: { value: pokemon.types, isValid: true}\r\n  });\r\n\r\n  const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n  ];\r\n\r\n  const hasType = (type : String) : boolean => {\r\n    return form.types.value.includes(type);\r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = {[fieldName] : { value: fieldValue }};\r\n\r\n    setForm({...form, ...newField});\r\n  }\r\n   \r\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const checked = e.target.checked;\r\n    let newField: Field;\r\n\r\n    if(checked) {\r\n      // si l'utilisateur coche un type, à l'ajoute a la liste des types de pokemon.\r\n      const newTypes: string[] = form.types.value.concat([type]);\r\n      newField = { value: newTypes }\r\n    } else {\r\n      //  si l'utilisateur decoche un type, on le retire de la liste des types de pokemon\r\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n      newField = { value: newTypes };\r\n    }\r\n\r\n    setForm({...form, ...{ types: newField }});\r\n  } \r\n\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\"> \r\n            <div className=\"card-image\">\r\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n            </div>\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input id=\"name\" name = 'name' type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)} ></input>\r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input id=\"hp\" name = 'hp' type=\"number\" className=\"form-control\"  value={form.hp.value} onChange={e => handleInputChange(e)} ></input>\r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input id=\"cp\" name = 'cp' type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)} ></input>\r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n                  {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                      <label>\r\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} onChange={e => selectType(type, e)} ></input>\r\n                        <span>\r\n                          <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n   \r\nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}